//
//  HomeViewController.swift
//  Map Weather
//
//  Created by Artashes Noknok on 7/25/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps

protocol HomeDisplayLogic: AnyObject
{
    func displaySuccess(viewModel: Home.Something.ViewModel)
    func displayError(errorStr:String)
    func showLoader()
    func hideLoader()
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    @IBOutlet weak var mapView: GMSMapView!
    
    @IBOutlet weak var windSpeedLabel: UILabel!
    @IBOutlet weak var sunsetTimeLabel: UILabel!
    @IBOutlet weak var tempValueLabel: UILabel!
    @IBOutlet weak var cityNameLabel: UILabel!
    @IBOutlet weak var weatherInfoBackView: UIView!
    
    let locationManager = CLLocationManager()
    var curLocValue = CLLocationCoordinate2D()
    var didFindMyLocation = false
    var markers = GMSMarker()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.locationManager.requestAlwaysAuthorization()
        // For use in foreground
        self.locationManager.requestWhenInUseAuthorization()
        
        if CLLocationManager.locationServicesEnabled() {
            locationManager.delegate = self
            locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
            locationManager.startUpdatingLocation()
        }
        mapView.settings.compassButton = true
        mapView.isMyLocationEnabled = true
        mapView.settings.myLocationButton = true
        mapView.delegate = self
    }
    
    // MARK: Do something
    
    
    func doGetWeather(lat:String, lon:String)
    {
        weatherInfoBackView.isHidden = true
        let request = Home.Something.Request(lat: lat, lon: lon)
        interactor?.doGetWeather(request: request)
    }
    
    func displaySuccess(viewModel: Home.Something.ViewModel)
    {
        weatherInfoBackView.isHidden = false
        cityNameLabel.text = viewModel.weattherDispModel.cityName
        tempValueLabel.text = "\(viewModel.weattherDispModel.temp)" + "Â°C"
        windSpeedLabel.text = "\(viewModel.weattherDispModel.windSpd)" + "m/h"
        sunsetTimeLabel.text = viewModel.weattherDispModel.sunset
    }
    
    func cameraMoveToLocation(toLocation: CLLocationCoordinate2D?) {
        if toLocation != nil {
            mapView.camera = GMSCameraPosition.camera(withTarget: toLocation!, zoom: 15)
            doGetWeather(lat: "\(String(describing: toLocation!.latitude))", lon: "\(String(describing: toLocation!.longitude))")
        }
    }
    
    func displayError(errorStr:String) {
        showAlert(title: "Error", msg: errorStr)
    }
    
    //MARK: - Hide & Show Loader
    
    func showLoader() {
        view.showLoader()
    }
    
    func hideLoader() {
        DispatchQueue.main.async {
            self.view.removeLoader()
        }
    }
}
extension HomeViewController : CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        guard let locValue: CLLocationCoordinate2D = manager.location?.coordinate else { return }
        cameraMoveToLocation(toLocation: locValue)
        locationManager.stopUpdatingLocation()
        print("locations = \(locValue.latitude) \(locValue.longitude)")
    }
}

extension HomeViewController: GMSMapViewDelegate {
    func mapView(_ mapView: GMSMapView, didLongPressAt coordinate: CLLocationCoordinate2D) {
        let marker = GMSMarker()
        mapView.clear()
        marker.map = nil
        marker.position = coordinate
        marker.map = mapView
        doGetWeather(lat:  "\(String(describing: coordinate.latitude))", lon: "\(String(describing: coordinate.longitude))")
    }
}
